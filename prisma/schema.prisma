// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model ContactMessage {
  id                String  @id @default(cuid())
  name      String?
  text      String
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  isTeacher    Boolean   @default(false)
  image         String?
  subscribed   Boolean   @default(false)
  subscriptionId String?
  school    String?
  recentTutors String? @db.Text
  notifs String? @db.Text
  checkIns         CheckIn[]
  accounts      Account[]
  sessions      Session[]
  tutors       Tutor[]
  questionAnswers TutorQuestions[]
  uploadedContent String?
}



model AccessRequest {
  id            String    @id @default(cuid())
  name          String?
  school        String
  subject       String
  contact       String

}

enum GameType {
  mcq
  open_ended
}
enum CheckInType {
  mcq
  open_ended
}


model CheckIn {
  id          String     @id @default(cuid())
  userId      String
  code        String? @unique
  title      String? @default("Untitled")
  questions   Question[]
  timeStarted DateTime
  topic       String
  timeEnded   DateTime?
  standard    String?
  reportCreated Boolean? @default(false)
  mostMissed  String? @db.Text
  zeroStudents String?
  average   Float?
  notes     String? @db.Text
  checkInType    CheckInType
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  results    Result[]
  contentSource       String?

  @@index([userId])
}

model Game {
  id          String     @id @default(cuid())
  userId      String
  // questions   Question[]
  timeStarted DateTime
  topic       String
  timeEnded   DateTime?
  gameType    GameType
  // user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model topic_count {
  id    String @id @default(cuid())
  topic String @unique
  count Int
}

model Question {
  id                String   @id @default(cuid())
  question          String
  answer            String
  checkInId         String
  options           Json? // for mcq questions
  percentageCorrect Float? // for open_ended questions
  isCorrect         Boolean? // for mcq questions
  questionType      CheckInType
  userAnswer        String?

  checkIn CheckIn @relation(fields: [checkInId], references: [id])

  @@index([checkInId])
}

model Result {
  id                String   @id @default(cuid())
  studentName      String
  checkInId         String
  questionResults  Json? // array containing questions and whether they were correct or not
  totalRight      Int?
  totalQuestions  Int?
  score            Float?
  timeSubmitted     DateTime

  checkIn CheckIn @relation(fields: [checkInId], references: [id])

  @@index([checkInId])
}

model Tutor {
  id    String   @id @default(cuid())
  joinCode String @unique
  userId String
  tutorDisplayName String
  tutorName String 
  tutorDescription String? 
  tutorType String?
  placeholderQs String? @db.Text
  basePrompt String? @db.Text
  uploadedContent String?
  ownerName String?
  essayPrompt String?
  assistantId String?
  questions  TutorQuestions[]

  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TutorQuestions {
  id   String   @id @default(cuid())
  question String @db.Text
  answer String? @db.Text
  studentName String
  tutorId String
  date String?
  userId String?
  
  
  tutor        Tutor?       @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tutorId])
  @@index([userId])
}